
Laboratorio5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1e  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080c  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055f  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000431  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ed  00000000  00000000  000021e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000022d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 67 00 	call	0xce	; 0xce <main>
  88:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
	sei();
}

// Configuración ADC
void ADC_Init(void) {
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (canal_ADC & 0x07); // AVcc como referencia
  96:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  9a:	90 81       	ld	r25, Z
  9c:	87 70       	andi	r24, 0x07	; 7
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	89 2b       	or	r24, r25
  a2:	80 83       	st	Z, r24
	ADCSRA = 0;
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
  aa:	80 81       	ld	r24, Z
  ac:	8f 68       	ori	r24, 0x8F	; 143
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <setup>:
}

/****************************************/
// Subrutinas sin Interrupcion
void setup(void){
	cli();
  b8:	f8 94       	cli
	ADC_Init();
  ba:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	PWM1_Init();
  be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <PWM1_Init>
	PWM2_Init();
  c2:	0e 94 09 01 	call	0x212	; 0x212 <PWM2_Init>
	PWM3_Init();
  c6:	0e 94 17 01 	call	0x22e	; 0x22e <PWM3_Init>
	sei();
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <main>:
volatile uint8_t canal_ADC = 0;
/****************************************/
// Función principal
int main(void) {
	// Configuracion inicial
	setup();
  ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <setup>
	
	while (1) {
		update_DutyCycle1(500 + (POT1 * 2000UL / 1023));
  d2:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <POT1>
  d6:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <POT1+0x1>
  da:	a0 ed       	ldi	r26, 0xD0	; 208
  dc:	b7 e0       	ldi	r27, 0x07	; 7
  de:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__umulhisi3>
  e2:	0f 2e       	mov	r0, r31
  e4:	cc 24       	eor	r12, r12
  e6:	ca 94       	dec	r12
  e8:	f3 e0       	ldi	r31, 0x03	; 3
  ea:	df 2e       	mov	r13, r31
  ec:	e1 2c       	mov	r14, r1
  ee:	f1 2c       	mov	r15, r1
  f0:	f0 2d       	mov	r31, r0
  f2:	a7 01       	movw	r20, r14
  f4:	96 01       	movw	r18, r12
  f6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__udivmodsi4>
  fa:	c9 01       	movw	r24, r18
  fc:	8c 50       	subi	r24, 0x0C	; 12
  fe:	9e 4f       	sbci	r25, 0xFE	; 254
 100:	0e 94 04 01 	call	0x208	; 0x208 <update_DutyCycle1>
		update_DutyCycle2(500 + (POT2 * 2000UL / 1023));
 104:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <POT2>
 108:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <POT2+0x1>
 10c:	a0 ed       	ldi	r26, 0xD0	; 208
 10e:	b7 e0       	ldi	r27, 0x07	; 7
 110:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__umulhisi3>
 114:	a7 01       	movw	r20, r14
 116:	96 01       	movw	r18, r12
 118:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__udivmodsi4>
 11c:	c9 01       	movw	r24, r18
 11e:	8c 50       	subi	r24, 0x0C	; 12
 120:	9e 4f       	sbci	r25, 0xFE	; 254
 122:	0e 94 12 01 	call	0x224	; 0x224 <update_DutyCycle2>
		update_DutyCycle3(POT3 >> 2);
 126:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <POT3>
 12a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <POT3+0x1>
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	0e 94 23 01 	call	0x246	; 0x246 <update_DutyCycle3>
 13a:	cb cf       	rjmp	.-106    	; 0xd2 <main+0x4>

0000013c <__vector_21>:
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
}

/****************************************/
// Subrutinas de Interrupcion
ISR(ADC_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	switch (canal_ADC){
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	69 f0       	breq	.+26     	; 0x17a <__vector_21+0x3e>
 160:	18 f0       	brcs	.+6      	; 0x168 <__vector_21+0x2c>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	99 f0       	breq	.+38     	; 0x18c <__vector_21+0x50>
 166:	1a c0       	rjmp	.+52     	; 0x19c <__vector_21+0x60>
		case 0: POT1 = ADC; break;
 168:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 16c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 170:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <POT1+0x1>
 174:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <POT1>
 178:	11 c0       	rjmp	.+34     	; 0x19c <__vector_21+0x60>
		case 1: POT2 = ADC; break;
 17a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 17e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 182:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <POT2+0x1>
 186:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <POT2>
 18a:	08 c0       	rjmp	.+16     	; 0x19c <__vector_21+0x60>
		case 2: POT3 = ADC; break;
 18c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 190:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 194:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <POT3+0x1>
 198:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <POT3>
	}
	canal_ADC = (canal_ADC + 1) % 3;
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 45 01 	call	0x28a	; 0x28a <__divmodhi4>
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADMUX = (ADMUX & 0xF0) | (canal_ADC & 0x07);
 1b0:	ec e7       	ldi	r30, 0x7C	; 124
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	90 81       	ld	r25, Z
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	90 7f       	andi	r25, 0xF0	; 240
 1bc:	87 70       	andi	r24, 0x07	; 7
 1be:	89 2b       	or	r24, r25
 1c0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Volver a iniciar conversion
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <PWM1_Init>:
*/
#include "PWM1.h"

void PWM1_Init(void) {
	// PB1 (OC1A) como salida (Arduino D9)
	DDRB |= (1 << PINB1);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << WGM11); // Clear OC1A on compare match, set at BOTTOM (non-inverting)
 1ee:	82 e8       	ldi	r24, 0x82	; 130
 1f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11); // Prescaler 8
 1f4:	82 e1       	ldi	r24, 0x12	; 18
 1f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 20000;
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	9e e4       	ldi	r25, 0x4E	; 78
 1fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 202:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 206:	08 95       	ret

00000208 <update_DutyCycle1>:
}

// Establece el ancho de pulso en ticks del Timer1
void update_DutyCycle1(uint16_t dutyCycle) {
	OCR1A = dutyCycle;
 208:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 20c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 210:	08 95       	ret

00000212 <PWM2_Init>:
*/
#include "PWM2.h"

void PWM2_Init(void) {
	// PB2 (OC1B) como salida (Arduino D10)
	DDRB |= (1 << PINB2);
 212:	84 b1       	in	r24, 0x04	; 4
 214:	84 60       	ori	r24, 0x04	; 4
 216:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A |= (1 << COM1B1); // Clear OC1B on compare match, set at BOTTOM (non-inverting)
 218:	e0 e8       	ldi	r30, 0x80	; 128
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	80 62       	ori	r24, 0x20	; 32
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <update_DutyCycle2>:
}

// Establece el ancho de pulso en ticks del Timer1
void update_DutyCycle2(uint16_t dutyCycle) {
	OCR1B = dutyCycle;
 224:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 228:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 22c:	08 95       	ret

0000022e <PWM3_Init>:

uint8_t contador_PWM = 0;
uint8_t limite_contador = 0;

void PWM3_Init(void){
	DDRD |= (1 << PIND5);	// Salida PD5
 22e:	8a b1       	in	r24, 0x0a	; 10
 230:	80 62       	ori	r24, 0x20	; 32
 232:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = 0; //Non invert 
 234:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);  //Prescaler de 64
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	85 bd       	out	0x25, r24	; 37
	
	TIMSK0 = (1<<TOIE0);	// Interrupcion por overflow del timer 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 255;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	86 bd       	out	0x26, r24	; 38
 244:	08 95       	ret

00000246 <update_DutyCycle3>:
}

void update_DutyCycle3(uint16_t dutyCycle){
	limite_contador = dutyCycle;
 246:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <limite_contador>
 24a:	08 95       	ret

0000024c <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
	if (contador_PWM >= limite_contador)
 25a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <contador_PWM>
 25e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <limite_contador>
 262:	98 17       	cp	r25, r24
 264:	10 f0       	brcs	.+4      	; 0x26a <__vector_16+0x1e>
	{
		PORTD = 0;
 266:	1b b8       	out	0x0b, r1	; 11
 268:	02 c0       	rjmp	.+4      	; 0x26e <__vector_16+0x22>
	}
	else
	{
		PORTD = 0b00100000;
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	8b b9       	out	0x0b, r24	; 11
	}
	contador_PWM += 1;
 26e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <contador_PWM>
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <contador_PWM>
	TCNT0 = 255;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	86 bd       	out	0x26, r24	; 38
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__divmodhi4>:
 28a:	97 fb       	bst	r25, 7
 28c:	07 2e       	mov	r0, r23
 28e:	16 f4       	brtc	.+4      	; 0x294 <__divmodhi4+0xa>
 290:	00 94       	com	r0
 292:	07 d0       	rcall	.+14     	; 0x2a2 <__divmodhi4_neg1>
 294:	77 fd       	sbrc	r23, 7
 296:	09 d0       	rcall	.+18     	; 0x2aa <__divmodhi4_neg2>
 298:	0e 94 8a 01 	call	0x314	; 0x314 <__udivmodhi4>
 29c:	07 fc       	sbrc	r0, 7
 29e:	05 d0       	rcall	.+10     	; 0x2aa <__divmodhi4_neg2>
 2a0:	3e f4       	brtc	.+14     	; 0x2b0 <__divmodhi4_exit>

000002a2 <__divmodhi4_neg1>:
 2a2:	90 95       	com	r25
 2a4:	81 95       	neg	r24
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	08 95       	ret

000002aa <__divmodhi4_neg2>:
 2aa:	70 95       	com	r23
 2ac:	61 95       	neg	r22
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255

000002b0 <__divmodhi4_exit>:
 2b0:	08 95       	ret

000002b2 <__udivmodsi4>:
 2b2:	a1 e2       	ldi	r26, 0x21	; 33
 2b4:	1a 2e       	mov	r1, r26
 2b6:	aa 1b       	sub	r26, r26
 2b8:	bb 1b       	sub	r27, r27
 2ba:	fd 01       	movw	r30, r26
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <__udivmodsi4_ep>

000002be <__udivmodsi4_loop>:
 2be:	aa 1f       	adc	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	ee 1f       	adc	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	a2 17       	cp	r26, r18
 2c8:	b3 07       	cpc	r27, r19
 2ca:	e4 07       	cpc	r30, r20
 2cc:	f5 07       	cpc	r31, r21
 2ce:	20 f0       	brcs	.+8      	; 0x2d8 <__udivmodsi4_ep>
 2d0:	a2 1b       	sub	r26, r18
 2d2:	b3 0b       	sbc	r27, r19
 2d4:	e4 0b       	sbc	r30, r20
 2d6:	f5 0b       	sbc	r31, r21

000002d8 <__udivmodsi4_ep>:
 2d8:	66 1f       	adc	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	1a 94       	dec	r1
 2e2:	69 f7       	brne	.-38     	; 0x2be <__udivmodsi4_loop>
 2e4:	60 95       	com	r22
 2e6:	70 95       	com	r23
 2e8:	80 95       	com	r24
 2ea:	90 95       	com	r25
 2ec:	9b 01       	movw	r18, r22
 2ee:	ac 01       	movw	r20, r24
 2f0:	bd 01       	movw	r22, r26
 2f2:	cf 01       	movw	r24, r30
 2f4:	08 95       	ret

000002f6 <__umulhisi3>:
 2f6:	a2 9f       	mul	r26, r18
 2f8:	b0 01       	movw	r22, r0
 2fa:	b3 9f       	mul	r27, r19
 2fc:	c0 01       	movw	r24, r0
 2fe:	a3 9f       	mul	r26, r19
 300:	70 0d       	add	r23, r0
 302:	81 1d       	adc	r24, r1
 304:	11 24       	eor	r1, r1
 306:	91 1d       	adc	r25, r1
 308:	b2 9f       	mul	r27, r18
 30a:	70 0d       	add	r23, r0
 30c:	81 1d       	adc	r24, r1
 30e:	11 24       	eor	r1, r1
 310:	91 1d       	adc	r25, r1
 312:	08 95       	ret

00000314 <__udivmodhi4>:
 314:	aa 1b       	sub	r26, r26
 316:	bb 1b       	sub	r27, r27
 318:	51 e1       	ldi	r21, 0x11	; 17
 31a:	07 c0       	rjmp	.+14     	; 0x32a <__udivmodhi4_ep>

0000031c <__udivmodhi4_loop>:
 31c:	aa 1f       	adc	r26, r26
 31e:	bb 1f       	adc	r27, r27
 320:	a6 17       	cp	r26, r22
 322:	b7 07       	cpc	r27, r23
 324:	10 f0       	brcs	.+4      	; 0x32a <__udivmodhi4_ep>
 326:	a6 1b       	sub	r26, r22
 328:	b7 0b       	sbc	r27, r23

0000032a <__udivmodhi4_ep>:
 32a:	88 1f       	adc	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	5a 95       	dec	r21
 330:	a9 f7       	brne	.-22     	; 0x31c <__udivmodhi4_loop>
 332:	80 95       	com	r24
 334:	90 95       	com	r25
 336:	bc 01       	movw	r22, r24
 338:	cd 01       	movw	r24, r26
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
