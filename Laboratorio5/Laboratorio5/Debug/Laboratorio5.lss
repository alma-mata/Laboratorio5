
Laboratorio5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000986  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f4  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ee  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
// Lectura del ADC
uint16_t ADC_Read(void) {
	ADCSRA |= (1 << ADSC); // Iniciar conversión
	while (ADCSRA & (1 << ADSC)); // Esperar hasta que la conversión se complete
	return ADC; // Retornar valor convertido
}
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
  96:	80 81       	ld	r24, Z
  98:	87 66       	ori	r24, 0x67	; 103
  9a:	80 83       	st	Z, r24
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
  a2:	80 81       	ld	r24, Z
  a4:	8f 68       	ori	r24, 0x8F	; 143
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <setup>:
  aa:	f8 94       	cli
  ac:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
  b0:	0e 94 ab 00 	call	0x156	; 0x156 <PWM1_Init>
  b4:	0e 94 c6 00 	call	0x18c	; 0x18c <PWM2_Init>
  b8:	14 bc       	out	0x24, r1	; 36
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	85 bd       	out	0x25, r24	; 37
  be:	83 e8       	ldi	r24, 0x83	; 131
  c0:	86 bd       	out	0x26, r24	; 38
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <main>:
  cc:	0e 94 55 00 	call	0xaa	; 0xaa <setup>
  d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <valor_ADC>
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	a0 ea       	ldi	r26, 0xA0	; 160
  d8:	bf e0       	ldi	r27, 0x0F	; 15
  da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__umulhisi3>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	33 e0       	ldi	r19, 0x03	; 3
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__udivmodsi4>
  ea:	c9 01       	movw	r24, r18
  ec:	88 51       	subi	r24, 0x18	; 24
  ee:	9c 4f       	sbci	r25, 0xFC	; 252
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	0e 94 c1 00 	call	0x182	; 0x182 <update_DutyCycle1>
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x36>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x40>
 10c:	00 00       	nop
 10e:	e0 cf       	rjmp	.-64     	; 0xd0 <main+0x4>

00000110 <__vector_21>:

/****************************************/
// Subrutinas de Interrupcion
ISR(ADC_vect){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	valor_ADC = ADCH;
 120:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_ADC>
	ADCSRA |= (1<<ADSC); //Volver a iniciar
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_16>:

ISR(TIMER0_OVF_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
	//else{
		//potenciometro = 0;
		//ADMUX |= (1<<REFS0)|(1<<MUX2)|(1<<MUX1);
	//}
	//_delay_us(1);
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <PWM1_Init>:
#include <avr/io.h>
#include "PWM1.h"

void PWM1_Init(void) {
	// PB1 (OC1A) como salida (Arduino D9)
	DDRB |= (1 << PINB1);
 156:	84 b1       	in	r24, 0x04	; 4
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << WGM11); // Clear OC1A on compare match, set at BOTTOM (non-inverting)
 15c:	82 e8       	ldi	r24, 0x82	; 130
 15e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
 162:	8a e1       	ldi	r24, 0x1A	; 26
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 39999; // Periodo PWM para 50Hz (16MHz/(8*50Hz) - 1 = 39999)
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	9c e9       	ldi	r25, 0x9C	; 156
 16c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 170:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 3000; // Ancho de pulso inicial (1.5ms - posición neutra)
 174:	88 eb       	ldi	r24, 0xB8	; 184
 176:	9b e0       	ldi	r25, 0x0B	; 11
 178:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 17c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 180:	08 95       	ret

00000182 <update_DutyCycle1>:
}

// Establece el ancho de pulso en ticks del Timer1
void update_DutyCycle1(uint16_t dutyCycle) {
	OCR1A = dutyCycle;
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 18a:	08 95       	ret

0000018c <PWM2_Init>:
#include <avr/io.h>
#include "PWM2.h"

void PWM2_Init(void) {
	// PB2 (OC1B) como salida (Arduino D10)
	DDRB |= (1 << PINB2);
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A |= (1 << COM1B1); // Clear OC1B on compare match, set at BOTTOM (non-inverting)
 192:	e0 e8       	ldi	r30, 0x80	; 128
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	80 83       	st	Z, r24

	OCR1B = 3000;
 19c:	88 eb       	ldi	r24, 0xB8	; 184
 19e:	9b e0       	ldi	r25, 0x0B	; 11
 1a0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1a4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1a8:	08 95       	ret

000001aa <__udivmodsi4>:
 1aa:	a1 e2       	ldi	r26, 0x21	; 33
 1ac:	1a 2e       	mov	r1, r26
 1ae:	aa 1b       	sub	r26, r26
 1b0:	bb 1b       	sub	r27, r27
 1b2:	fd 01       	movw	r30, r26
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <__udivmodsi4_ep>

000001b6 <__udivmodsi4_loop>:
 1b6:	aa 1f       	adc	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	ee 1f       	adc	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	a2 17       	cp	r26, r18
 1c0:	b3 07       	cpc	r27, r19
 1c2:	e4 07       	cpc	r30, r20
 1c4:	f5 07       	cpc	r31, r21
 1c6:	20 f0       	brcs	.+8      	; 0x1d0 <__udivmodsi4_ep>
 1c8:	a2 1b       	sub	r26, r18
 1ca:	b3 0b       	sbc	r27, r19
 1cc:	e4 0b       	sbc	r30, r20
 1ce:	f5 0b       	sbc	r31, r21

000001d0 <__udivmodsi4_ep>:
 1d0:	66 1f       	adc	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	88 1f       	adc	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	1a 94       	dec	r1
 1da:	69 f7       	brne	.-38     	; 0x1b6 <__udivmodsi4_loop>
 1dc:	60 95       	com	r22
 1de:	70 95       	com	r23
 1e0:	80 95       	com	r24
 1e2:	90 95       	com	r25
 1e4:	9b 01       	movw	r18, r22
 1e6:	ac 01       	movw	r20, r24
 1e8:	bd 01       	movw	r22, r26
 1ea:	cf 01       	movw	r24, r30
 1ec:	08 95       	ret

000001ee <__umulhisi3>:
 1ee:	a2 9f       	mul	r26, r18
 1f0:	b0 01       	movw	r22, r0
 1f2:	b3 9f       	mul	r27, r19
 1f4:	c0 01       	movw	r24, r0
 1f6:	a3 9f       	mul	r26, r19
 1f8:	70 0d       	add	r23, r0
 1fa:	81 1d       	adc	r24, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	91 1d       	adc	r25, r1
 200:	b2 9f       	mul	r27, r18
 202:	70 0d       	add	r23, r0
 204:	81 1d       	adc	r24, r1
 206:	11 24       	eor	r1, r1
 208:	91 1d       	adc	r25, r1
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
