
Laboratorio5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000887  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000766  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c6  00000000  00000000  000012ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002e  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Init>:
	sei();
}

// Configuración ADC
void ADC_Init(void) {
	ADMUX = 0;
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); // AVcc como referencia
  86:	80 81       	ld	r24, Z
  88:	87 64       	ori	r24, 0x47	; 71
  8a:	80 83       	st	Z, r24
	ADCSRA = 0;
  8c:	ea e7       	ldi	r30, 0x7A	; 122
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
  92:	80 81       	ld	r24, Z
  94:	87 68       	ori	r24, 0x87	; 135
  96:	80 83       	st	Z, r24
  98:	08 95       	ret

0000009a <setup>:
}

/****************************************/
// Subrutinas sin Interrupcion
void setup(void){
	cli();
  9a:	f8 94       	cli
	ADC_Init();
  9c:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Init>
	PWM_Init();
  a0:	0e 94 80 00 	call	0x100	; 0x100 <PWM_Init>
	sei();
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <ADC_Read>:
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
}

// Lectura del ADC
uint16_t ADC_Read(void) {
	ADCSRA |= (1 << ADSC); // Iniciar conversión
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperar hasta que la conversión se complete
  b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b6:	86 fd       	sbrc	r24, 6
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <ADC_Read+0xa>
	return ADC; // Retornar valor convertido
  ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  c2:	08 95       	ret

000000c4 <main>:

/****************************************/
// Función principal
int main(void) {
	// Configuracion inicial
	setup();
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <setup>
	
	while (1) {
		// Leer valor del potenciómetro (0-1023)
		uint16_t valor_ADC = ADC_Read();
  c8:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Read>
		
		// Mapear ADC a ancho de pulso (2000-4000 = 1ms-2ms @ 16MHz, prescaler 8)
		uint16_t dutyCycle = (valor_ADC * 4000UL / 1023) + 1000;
  cc:	9c 01       	movw	r18, r24
  ce:	a0 ea       	ldi	r26, 0xA0	; 160
  d0:	bf e0       	ldi	r27, 0x0F	; 15
  d2:	0e 94 bd 00 	call	0x17a	; 0x17a <__umulhisi3>
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	33 e0       	ldi	r19, 0x03	; 3
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	0e 94 9b 00 	call	0x136	; 0x136 <__udivmodsi4>
		
		update_DutyCycle(dutyCycle); // Actualizar PWM
  e2:	c9 01       	movw	r24, r18
  e4:	88 51       	subi	r24, 0x18	; 24
  e6:	9c 4f       	sbci	r25, 0xFC	; 252
  e8:	0e 94 96 00 	call	0x12c	; 0x12c <update_DutyCycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	89 ef       	ldi	r24, 0xF9	; 249
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x2e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x38>
  fc:	00 00       	nop
  fe:	e4 cf       	rjmp	.-56     	; 0xc8 <main+0x4>

00000100 <PWM_Init>:
#include <avr/io.h>
#include "PWM1.h"

void PWM_Init(void) {
	// PB1 (OC1A) como salida (Arduino D9)
	DDRB |= (1 << PORTB1);
 100:	84 b1       	in	r24, 0x04	; 4
 102:	82 60       	ori	r24, 0x02	; 2
 104:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << WGM11); // Clear OC1A on compare match, set at BOTTOM (non-inverting)
 106:	82 e8       	ldi	r24, 0x82	; 130
 108:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
 10c:	8a e1       	ldi	r24, 0x1A	; 26
 10e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 39999; // Periodo PWM para 50Hz (16MHz/(8*50Hz) - 1 = 39999)
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9c e9       	ldi	r25, 0x9C	; 156
 116:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 11a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 3000; // Ancho de pulso inicial (1.5ms - posición neutra)
 11e:	88 eb       	ldi	r24, 0xB8	; 184
 120:	9b e0       	ldi	r25, 0x0B	; 11
 122:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 126:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 12a:	08 95       	ret

0000012c <update_DutyCycle>:
}

// Establece el ancho de pulso en ticks del Timer1
void update_DutyCycle(uint16_t dutyCycle) {
	OCR1A = dutyCycle;
 12c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 130:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 134:	08 95       	ret

00000136 <__udivmodsi4>:
 136:	a1 e2       	ldi	r26, 0x21	; 33
 138:	1a 2e       	mov	r1, r26
 13a:	aa 1b       	sub	r26, r26
 13c:	bb 1b       	sub	r27, r27
 13e:	fd 01       	movw	r30, r26
 140:	0d c0       	rjmp	.+26     	; 0x15c <__udivmodsi4_ep>

00000142 <__udivmodsi4_loop>:
 142:	aa 1f       	adc	r26, r26
 144:	bb 1f       	adc	r27, r27
 146:	ee 1f       	adc	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	a2 17       	cp	r26, r18
 14c:	b3 07       	cpc	r27, r19
 14e:	e4 07       	cpc	r30, r20
 150:	f5 07       	cpc	r31, r21
 152:	20 f0       	brcs	.+8      	; 0x15c <__udivmodsi4_ep>
 154:	a2 1b       	sub	r26, r18
 156:	b3 0b       	sbc	r27, r19
 158:	e4 0b       	sbc	r30, r20
 15a:	f5 0b       	sbc	r31, r21

0000015c <__udivmodsi4_ep>:
 15c:	66 1f       	adc	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	88 1f       	adc	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	1a 94       	dec	r1
 166:	69 f7       	brne	.-38     	; 0x142 <__udivmodsi4_loop>
 168:	60 95       	com	r22
 16a:	70 95       	com	r23
 16c:	80 95       	com	r24
 16e:	90 95       	com	r25
 170:	9b 01       	movw	r18, r22
 172:	ac 01       	movw	r20, r24
 174:	bd 01       	movw	r22, r26
 176:	cf 01       	movw	r24, r30
 178:	08 95       	ret

0000017a <__umulhisi3>:
 17a:	a2 9f       	mul	r26, r18
 17c:	b0 01       	movw	r22, r0
 17e:	b3 9f       	mul	r27, r19
 180:	c0 01       	movw	r24, r0
 182:	a3 9f       	mul	r26, r19
 184:	70 0d       	add	r23, r0
 186:	81 1d       	adc	r24, r1
 188:	11 24       	eor	r1, r1
 18a:	91 1d       	adc	r25, r1
 18c:	b2 9f       	mul	r27, r18
 18e:	70 0d       	add	r23, r0
 190:	81 1d       	adc	r24, r1
 192:	11 24       	eor	r1, r1
 194:	91 1d       	adc	r25, r1
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
